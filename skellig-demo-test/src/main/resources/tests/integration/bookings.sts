name ("Event service is listening for the booking events") {
    protocol = rmq
    execution = async
    timeout = 100
    delay = 100
    attempts = 30
    readFrom ["booking.log"]

    message {
        toJson() {
            eventCode = get(addEventTest).values.eventCode
            success = true
        }
    }

    // If you remove validation, first attempt will be successful (valid) and other 9 will not be executed
    // so we need this test to keep trying to get valid data and once received - respond with the message above
    validate {
        "booking.log".toString().jsonPath(eventCode) = get(addEventTest).values.eventCode
    }
}

name ("Event registered in the system with available seats (.+)") {
    test = "Add event with available seats " + ${1}
    passed {
        test = "Event inserted in database"
    }
}

name ("Add event with available seats (.+)") {
    id = addEventTest
    protocol = rmq
    sendTo ["event.changed"]
    properties { content_type = "application/json" }

    values {
        eventCode = ${newEventCode, evt1 + inc(event,5)}
        msg {
            code = ${eventCode}
            name = "event 1"
            date = toDateTime("01-01-2020 10:30:00")
            location = somewhere
            pricePerSeats [ ${1} ]
            takenSeats [${takenSeats,""}]
        }
    }

    message = toJson(${msg})
}

name ("Event inserted in database") {
    servers ["skellig-db"]
    table = event
    command = select

    where {
        code = get(addEventTest).values.eventCode
    }

    validate {
// TODO:    skellig-db[0].size() = "1".toInt()
        $."skellig-db".size() = "1".toInt()
    }
}

name ("Seats (.+) have been booked successfully for the event") {
    servers ["skellig-db"]
    table = event
    command = select

    where {
        code = get(addEventTest).values.eventCode
    }

    validate {
        $."skellig-db".fromIndex(0).taken_seats.contains(${1}) = true
    }
}

name ("Book seats (.+) of the event\s*(.*)") {
    url = "/booking/request"
    method = POST
    headers { "Content-type" = "application/json"}

    values {
        eventCode = ${2,get(addEventTest).values.eventCode}
    }

    payload {
        eventCode = ${eventCode}
        seats = listOf(${1})
    }

    validate {
        statusCode = "200".toInt()
        body.toString() {
            jsonPath(eventCode) = ${eventCode}
            jsonPath(success) = "true"
        }
    }
}

name ("Try to book seats (.+) of the event\s*(.*)") {
    id = tryBookSeatsTest
    url = "/booking/request"
    method = POST
    headers { "Content-type" = "application/json"}

    payload {
        eventCode = ${2}
        seats = listOf(${1})
    }
}

name ("Failed to book (.+) because") {

    validate {
        get(tryBookSeatsTest_result).body.toString() = ${reason}
    }
}

name ("Payment service received booking confirmation") {
    id = bookingReceivedTest
    protocol = ibmmq
    readFrom ["DEV.QUEUE.3"]

    validate {
        $."DEV.QUEUE.3".toString().jsonPath(eventCode) = get(addEventTest).values.eventCode
    }

    state {
        bookingCode = $result."DEV.QUEUE.3".toString().jsonPath(bookingCode)
        paymentToken = $result."DEV.QUEUE.3".toString().jsonPath(paymentToken)
    }
}


name ("Confirm payment for the booking") {
    id = confirmBookingTest
    url = "/booking/confirm"
    method = POST
    headers { "Content-type" = "application/json"}

    values {
        bookingCode = get(bookingCode)
        paymentToken = get(paymentToken)
//        expectedStatus200 {statusCode = "200".toInt()}
//        expectedStatus400 {statusCode = "400".toInt()}
    }

    payload {
        bookingCode = ${bookingCode}
        paymentProviderToken = ${token, ${paymentToken}}
        amount = 60
    }

    validate {
        statusCode = if(${token,""} == invalid, "400".toInt(), "200".toInt())
    }

//    validate = if(${token,""} == invalid, ${expectedStatus400}, ${expectedStatus200})
}

name ("Payment for the booking was (\w+)") {
    url = "/booking/" + get(confirmBookingTest).values.bookingCode
    method = GET
    headers { "Content-type" = "application/json"}

    validate {
        body.jsonPath(status) = ${1}
    }
}

name ("Cancel the booking and check the status") {
    url = "/booking/cancel/" + get(bookingCode)
    method = POST

    validate {
        statusCode = "200".toInt()
    }
}